/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.seb.todo.frame;

import fr.seb.todo.dao.CategoryDAO;
import fr.seb.todo.dao.TaskDAO;
import fr.seb.todo.entity.Task;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DAMAR ALI El-Fartouni
 */
public class TodoFrame extends javax.swing.JFrame {

    Map<String, Integer> categoriesMap;

    Connection dbConnection;
    
    DefaultTableModel dtm;

    /**
     * Création de la nouvelle form TodoListFrame
     */
    public TodoFrame() {
        initComponents();

        try {
            //La connexion à la base de données
            this.dbConnection = DriverManager.getConnection("jdbc:mysql://localhost/swing_todo", "root", "");

            initCategoryCombo();
            initTaskTable();

        } catch (SQLException ex) {
            Logger.getLogger(TodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void initCategoryCombo() throws SQLException {
        DefaultComboBoxModel<String> dcm = new DefaultComboBoxModel<>();

        CategoryDAO dao = new CategoryDAO(dbConnection);

        CategoryDAO request = dao.findAll();
        categoriesMap = request.getResultsAsMap();

        for (Map.Entry<String, Integer> category : categoriesMap.entrySet()) {
            String key = category.getKey();
            dcm.addElement(key);
        }

        categoryCombo.setModel(dcm);

    }

    private void initTaskTable() throws SQLException {
        //Récupération du modèle de la todoTable
        this.dtm = (DefaultTableModel) todoTable.getModel();
        
        dtm.setRowCount(0);

        TaskDAO dao = new TaskDAO(dbConnection);

        List<Task> tasks = dao.findAll().getResults();
        Object[] data;

        //Boucle sur le ResultSet
        for (Task task : tasks) {
            //Construction du tableau des données
            data = new Object[4];
            data[0] = task.getId();
            data[1] = task.getTaskName();
            data[2] = task.getCategory().getName();
            data[3] = task.getDone();
            //Ajout du tableau dans une nouvelle ligne du modele
            dtm.addRow(data);
        }
    }
    
    private void saveOrUpdateTask(Integer id){
        String taskName = taskNameField.getText();
        String categoryName = (String) categoryCombo.getSelectedItem();
        Boolean done = doneCheckBox.isSelected();
        Integer categoryId = categoriesMap.get(categoryName);

        try {
            Task task = new Task();
            task.setTaskName(taskName);
            task.setDone(done);
            task.setCategoryId(categoryId);
            task.setId(id);

            TaskDAO dao = new TaskDAO(dbConnection);
            dao.save(task);
            
        } catch (SQLException ex) {
            Logger.getLogger(TodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        todoTable = new javax.swing.JTable();
        taskNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        categoryCombo = new javax.swing.JComboBox<>();
        doneCheckBox = new javax.swing.JCheckBox();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Todo App");
        setAlwaysOnTop(true);

        todoTable.setAutoCreateRowSorter(true);
        todoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Tâche", "Catégorie", "Fait"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        todoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                todoTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(todoTable);
        todoTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setText("Tâche");

        jLabel2.setText("Catégorie");

        doneCheckBox.setText("Fait");

        addButton.setText("Ajouter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Modifier");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Supprimer");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton))
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(doneCheckBox)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(categoryCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(taskNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(doneCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        this.saveOrUpdateTask(null);
        try {
            initTaskTable();
        } catch (SQLException ex) {
            Logger.getLogger(TodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void todoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_todoTableMouseClicked
        int selectedIndex = todoTable.getSelectedRow();
        
        String taskName = (String)this.dtm.getValueAt(selectedIndex, 1);
        String categoryName = (String) this.dtm.getValueAt(selectedIndex, 2);
        Boolean done = (Boolean) this.dtm.getValueAt(selectedIndex, 3);
        
        //Gestion de la coche de la case et persistance
        int col = todoTable.columnAtPoint(evt.getPoint());
        if (col == 3) {
            Integer id = (Integer)this.dtm.getValueAt(selectedIndex, 0);
            this.saveOrUpdateTask(id);
        }
        
        DefaultComboBoxModel model = (DefaultComboBoxModel)categoryCombo.getModel();
        int pos = model.getIndexOf(categoryName);
        
        categoryCombo.setSelectedIndex(pos);
        taskNameField.setText(taskName);
        doneCheckBox.setSelected(done);
        
        
    }//GEN-LAST:event_todoTableMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int selectedIndex = todoTable.getSelectedRow();
        Integer id = (Integer)this.dtm.getValueAt(selectedIndex, 0);
        
        this.saveOrUpdateTask(id);
        
        try {
            initTaskTable();
        } catch (SQLException ex) {
            Logger.getLogger(TodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedIndex = todoTable.getSelectedRow();
        Integer id = (Integer)this.dtm.getValueAt(selectedIndex, 0);
        TaskDAO dao = new TaskDAO(dbConnection);
        try {
            dao.deleteOneById(id);
            initTaskTable();
        } catch (SQLException ex) {
            Logger.getLogger(TodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TodoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> categoryCombo;
    private javax.swing.JButton deleteButton;
    private javax.swing.JCheckBox doneCheckBox;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField taskNameField;
    private javax.swing.JTable todoTable;
    // End of variables declaration//GEN-END:variables
}
